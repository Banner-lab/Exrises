#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using std::shared_ptr;
struct Review
{
	std::string title;
	double price;
	int rating;
};

bool operator<(const shared_ptr<Review>& r1, const shared_ptr<Review>& r2);
bool worseThan(const shared_ptr<Review>& r1, const shared_ptr<Review>& r2);
bool priceHigher(const shared_ptr<Review>& r1, const shared_ptr<Review>& r2);
bool FillReview(shared_ptr<Review> &rr);
void ShowReview(const shared_ptr<Review> rr);

int main()
{
	using namespace std;

	vector<shared_ptr<Review>> books;
	shared_ptr<Review> temp;
	while (FillReview(temp))
		books.push_back(temp);
	
	cout << "Choose your favorite mode display:\n"
		<< "A:Origin mode  B:Title Alphaer  C:Rating Up   D:Rating Low\n"
		<<" E:Price Up     F:Price low      q:q to quit\n";
	char play;
	cin >> play;
	while (play != 'q')
	{
		vector<shared_ptr<Review>> bk(books);
		switch (play)
		{
		case 'A':
			break;
		case 'B':
			sort(bk.begin(), bk.end());break;
		case 'C':
			sort(bk.begin(), bk.end(), worseThan);break;
		case 'D':
			sort(bk.rbegin(), bk.rend(), worseThan); break;
		case 'E':
			sort(bk.begin(), bk.end(), priceHigher); break;
		case 'F':
			sort(bk.rbegin(), bk.rend(), priceHigher); break;
		}
		for_each(bk.begin(), bk.end(), ShowReview);
		cout << "Choose your favorite mode display:\n"
			<< "A:Origin mode  B:Title Alphaer  C:Rating Up   D:Rating Low\n"
			<< " E:Price Up     F:Price low      q:q to quit\n";
		cin >> play;
	}

	cout << "Bye.\n";
	return 0;
}

bool FillReview(shared_ptr<Review>& rr)
{
	rr = shared_ptr<Review>(new Review);
	std::cout << "Enter book title (quit to quit):";
	std::getline(std::cin, (*rr).title);
	if (rr->title == "quit")
		return false;
	std::cout << "Enter book rating: ";
	std::cin >> rr->rating;
	std::cout << "Enter book price:";
	std::cin >> rr->price;
	if (!std::cin)
		return false;
	while (std::cin.get() != '\n')
		continue;
	return true;
}

void ShowReview(const shared_ptr<Review> rr)
{
	std::cout << rr->rating << "\t" << rr->title << "\t"<<rr->price<<std::endl;
}

bool operator<(const shared_ptr<Review>& r1, const shared_ptr<Review>& r2)
{
	if ((*r1).title < (*r2).title)
		return true;
	else if ((*r1).title == (*r2).title && (*r1).rating < (*r2).rating)
		return true;
	else if (((*r1).rating == (*r2).rating && (*r1).price < (*r2).price))
		return true;
	else 
		return false;
}

bool worseThan(const shared_ptr<Review>& r1, const shared_ptr<Review>& r2)
{
	if ((*r1).rating < (*r2).rating)
		return true;
	else
		return false;
}


bool priceHigher(const shared_ptr<Review>& r1, const shared_ptr<Review>& r2)
{
	if (r1->price < r2->price)
		return true;
	else
		return false;
}
